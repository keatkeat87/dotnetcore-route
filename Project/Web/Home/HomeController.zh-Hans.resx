<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Best Way Transport specialises in providing door-to-door transport services between Singapore and Malaysia. Safe, convenient and hassle-free, you can expect to clear immigration without alighting from the vehicle! Whether you need transport for a work event or a leisure trip to Legoland, fishing in Mersing or shopping at JPO, we have just the right driver and vehicle for you." xml:space="preserve">
    <value>Best Way Transport 是一家提供往返新加坡和马来西亚专车接送服务的公司。有了我们专业的司机和舒适的车队，您将会享有一个安全及便利的旅程。我们的服务包括专属司机到您的附上接您，而整个通关的过程您也无需下车办理出入境的手续。无论您是想去乐高乐园游玩，到丰盛港钓鱼或在JPO购物，我们都有适合您的服务和车辆。</value>
  </data>
  <data name="Call Us On" xml:space="preserve">
    <value>致电我们</value>
  </data>
  <data name="From" xml:space="preserve">
    <value>从</value>
  </data>
  <data name="Interested to find out more about the exciting vacation spots in Singapore and Malaysia?" xml:space="preserve">
    <value>有兴趣了解更多关于新加坡和马来西亚的度假景点吗？</value>
  </data>
  <data name="Latest Blog" xml:space="preserve">
    <value>最新的部落格</value>
  </data>
  <data name="Online Booking" xml:space="preserve">
    <value>在线预订</value>
  </data>
  <data name="or" xml:space="preserve">
    <value>或</value>
  </data>
  <data name="Our Services" xml:space="preserve">
    <value>我们的服务配套</value>
  </data>
  <data name="Passengers" xml:space="preserve">
    <value>&lt;p&gt;乘客&lt;p&gt;</value>
  </data>
  <data name="Singapore to Malaysia" xml:space="preserve">
    <value>往返新加坡和马来西亚</value>
  </data>
  <data name="Testimonials" xml:space="preserve">
    <value>顾客好评</value>
  </data>
  <data name="View Packages" xml:space="preserve">
    <value>服务配套</value>
  </data>
  <data name="We have a whole range of packages for all your transport needs. We can also provide customisation for your trips." xml:space="preserve">
    <value>我们为您提供了一系列的接送服务，也可以按照您的需求特制包车的行程。</value>
  </data>
  <data name="We specialise in providing door-to-door transport services between Singapore and Malaysia. Safe, convenient and hassle-free, you can expect to clear immigration without alighting from the vehicle! Whether you need transport for a work or leisure trip, we have just the right driver and vehicle for you." xml:space="preserve">
    <value>Best Way Transport 拥有一组全职的专业司机和齐全的车队为您提供安全以及舒适的接送和包车服务，让您可以很便利的往返新加坡和马来西亚。</value>
  </data>
  <data name="&lt;div&gt;Hello&lt;/div&gt;&lt;i&gt; {0}&lt;/i&gt;" xml:space="preserve">
    <value>&lt;div&gt;wtf&lt;/div&gt;&lt;i&gt; {0}&lt;/i&gt;</value>
  </data>
  <data name="&lt;i&gt;Hello&lt;/i&gt; &lt;div&gt;{0}!&lt;/div&gt;" xml:space="preserve">
    <value>&lt;i&gt;Bonjour&lt;/i&gt; &lt;div&gt;{0} !&lt;/div&gt;</value>
  </data>
</root>